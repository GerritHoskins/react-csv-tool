{"version":3,"sources":["parseAndSave.js","dragAndDropColumns.js","dropZoneInput.js","App.js","index.js"],"names":["parseAndSave","source","fields","primaryId","onFinish","primaryIndex","findIndex","field","id","emailIndex","fieldName","malformedRaw","firstFormat","Object","entries","data","slice","filter","d","push","reduce","primaryMap","current","map","_","merged","forEach","index","length","shouldMerge","secondFormatCounter","secondFormat","isNaN","Number","email","malformed","result","parse","first","second","zipResults","JSZip","firstResult","papa","unparse","file","type","secondResultsFolder","folder","i","malformedResult","generateAsync","then","content","saveAs","save","DragAndDropColumn","pId","initialFields","fieldsets","useState","setFields","setPrimaryId","onDragEnd","useCallback","destination","reordered","splice","droppableId","provided","droppableProps","ref","innerRef","className","key","draggableId","snapshot","draggableProps","dragHandleProps","isDragging","value","placeholder","onChange","evt","target","disabled","onClick","uuidv4","Preview","meta","name","percent","status","previewUrl","src","Math","round","DropZoneInput","getUploadParams","body","FormData","append","url","onChangeStatus","xhr","onreadystatechange","readyState","JSON","response","console","log","styles","dropzone","overflow","border","background","inputLabelWithFiles","margin","canRemove","PreviewComponent","accept","App","useMemo","search","URLSearchParams","window","location","has","fieldsRaw","get","split","fieldRaw","generateInitalState","initialPrimaryId","setSource","isProcessing","setIsProcessing","find","isValid","valid","reason","files","Papa","complete","res","copy","params","set","prevParam","origin","toString","generatePermalink","toast","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.ef4bc00e.chunk.js","sourcesContent":["import papa from \"papaparse\";\nimport JSZip from \"jszip\";\nimport { saveAs } from \"file-saver\";\n\nfunction parse(source, fields, primaryId) {\n  const primaryIndex = fields.findIndex(field => field.id === primaryId);\n  const emailIndex = fields.findIndex(field => field.fieldName === \"email\");\n  const malformedRaw = [];\n  const firstFormat = Object.entries(\n    source.data\n      .slice(1)\n      .filter(d => {\n        if (\n          !d[primaryIndex] ||\n          !d[emailIndex] ||\n          d[primaryIndex] === \"#N/A\" ||\n          d[emailIndex] === \"#N/A\"\n        ) {\n          malformedRaw.push(d);\n          return false;\n        }\n\n        return true;\n      })\n      .reduce((primaryMap, current) => {\n        if (!primaryMap[current[primaryIndex]]) {\n          primaryMap[current[primaryIndex]] = [current];\n        } else {\n          primaryMap[current[primaryIndex]] = [\n            ...primaryMap[current[primaryIndex]],\n            current\n          ];\n        }\n        return primaryMap;\n      }, {})\n  ).map(([_, data]) => {\n    let merged = {};\n    fields.forEach((field, index) => {\n      merged[field.fieldName] = data[0][index];\n    });\n\n    if (data.length > 1) {\n      data.slice(1).forEach(d => {\n        fields.forEach((field, index) => {\n          if (!field.shouldMerge) {\n            merged[field.fieldName] = `${merged[field.fieldName]}; ${d[index]}`;\n          }\n        });\n      });\n    }\n\n    return merged;\n  });\n\n  const secondFormatCounter = {};\n  const secondFormat = [[]];\n\n  firstFormat.forEach(d => {\n    if (!isNaN(Number(secondFormatCounter[d.email]))) {\n      secondFormatCounter[d.email] = secondFormatCounter[d.email] + 1;\n\n      if (secondFormatCounter[d.email] < secondFormat.length) {\n        secondFormat[secondFormatCounter[d.email]].push(d);\n      } else {\n        secondFormat.push([d]);\n      }\n    } else {\n      secondFormatCounter[d.email] = 0;\n      secondFormat[0].push(d);\n    }\n  });\n\n  const malformed = malformedRaw.map(data => {\n    let result = {};\n    fields.forEach((field, index) => {\n      result[field.fieldName] = data[index];\n    });\n    return result;\n  });\n\n  return [firstFormat, secondFormat, malformed];\n}\n\nfunction save(first, second, malformed, onFinish) {\n  const zipResults = new JSZip();\n  const firstResult = papa.unparse(first);\n\n  zipResults.file(`First Format Result - ${first.length}.csv`, firstResult, {\n    type: \"text/csv;charset=utf-8;\"\n  });\n\n  const secondResultsFolder = zipResults.folder(\"Second Format Files\");\n\n  second.forEach((d, i) => {\n    const result = papa.unparse(d);\n    secondResultsFolder.file(\n      `Second Result Batch #${i + 1} - ${d.length} Entries.csv`,\n      result,\n      {\n        type: \"text/csv;charset=utf-8;\"\n      }\n    );\n  });\n\n  const malformedResult = papa.unparse(malformed);\n\n  zipResults.file(\n    `Malformed Entries - ${malformed.length}.csv`,\n    malformedResult,\n    {\n      type: \"text/csv;charset=utf-8;\"\n    }\n  );\n\n  zipResults.generateAsync({ type: \"blob\" }).then(content => {\n    saveAs(content, \"Blast Data.zip\");\n    onFinish();\n  });\n}\n\nexport default function parseAndSave(source, fields, primaryId, onFinish) {\n  const [first, second, malformed] = parse(source, fields, primaryId);\n  save(first, second, malformed, onFinish);\n}\n","import React, { useState, useCallback } from \"react\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nexport const DragAndDropColumn = ({pId, initialFields, fieldsets}) => {\r\n\r\n    const [fields, setFields] = useState(initialFields);\r\n    const [primaryId, setPrimaryId]  = useState(pId);\r\n\r\n    const onDragEnd = useCallback(\r\n        ({ source, destination }) => {\r\n            if (destination) {\r\n                setFields(fields => {\r\n                    const reordered = [...fields];\r\n                    const [field] = reordered.splice(source.index, 1);\r\n                    reordered.splice(destination.index, 0, field);\r\n\r\n                    return reordered;\r\n                });\r\n            }\r\n        },\r\n        [setFields]\r\n    );\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {provided => (\r\n                    <>\r\n                        <div\r\n                            {...provided.droppableProps}\r\n                            ref={provided.innerRef}\r\n                            className=\"fields\"\r\n                        >\r\n                            {fields.map((field, index) => (\r\n                                <Draggable\r\n                                    key={field.id}\r\n                                    draggableId={field.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            className={\r\n                                                snapshot.isDragging ? \"field isDragged\" : \"field\"\r\n                                            }\r\n                                        >\r\n                                            <div className=\"bar\">\r\n                                                <div />\r\n                                                <div />\r\n                                                <div />\r\n                                            </div>\r\n                                            <span>{index}</span>\r\n                                            <input\r\n                                                value={field.fieldName}\r\n                                                placeholder=\"Column Name\"\r\n                                                onChange={evt => {\r\n                                                    const fieldName = evt.target.value;\r\n                                                    setFields(fields => [\r\n                                                        ...fields.slice(0, index),\r\n                                                        { ...field, fieldName },\r\n                                                        ...fields.slice(index + 1)\r\n                                                    ]);\r\n                                                }}\r\n                                            />\r\n                                            <button\r\n                                                className=\"primaryToggle\"\r\n                                                disabled={field.id === primaryId}\r\n                                                onClick={() => setPrimaryId(field.id)}\r\n                                            >\r\n                                                Identifier\r\n                </button>\r\n                                            <button\r\n                                                className={\r\n                                                    field.shouldMerge\r\n                                                        ? \"shouldMerge active\"\r\n                                                        : \"shouldMerge\"\r\n                                                }\r\n                                                onClick={() =>\r\n                                                    setFields(fields => [\r\n                                                        ...fields.slice(0, index),\r\n                                                        { ...field, shouldMerge: !field.shouldMerge },\r\n                                                        ...fields.slice(index + 1)\r\n                                                    ])\r\n                                                }\r\n                                            >\r\n                                                Fixed\r\n                </button>\r\n                                            <button\r\n                                                className=\"delete\"\r\n                                                disabled={fields.length === 1}\r\n                                                onClick={() =>\r\n                                                    setFields(fields => [\r\n                                                        ...fields.slice(0, index),\r\n                                                        ...fields.slice(index + 1)\r\n                                                    ])\r\n                                                }\r\n                                            >\r\n                                                X\r\n                </button>\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                        <button\r\n                            className=\"addField\"\r\n                            onClick={() =>\r\n                                setFields(fields => [\r\n                                    ...fields,\r\n                                    {\r\n                                        id: uuidv4(),\r\n                                        fieldName: \"\",\r\n                                        shouldMerge: false\r\n                                    }\r\n                                ])\r\n                            }\r\n                        >\r\n                            Add Column\r\n        </button>\r\n                    </>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default DragAndDropColumn;","import React from 'react';\r\n\r\nimport 'react-dropzone-uploader/dist/styles.css';\r\nimport Dropzone from 'react-dropzone-uploader';\r\n\r\n// preview component\r\nconst Preview = ({ meta }) => {\r\n  const { name, percent, status, previewUrl } = meta;\r\n  return (\r\n    <div className=\"preview-box\">\r\n      <img src={previewUrl} />\r\n      <span className=\"name\">{name}</span> - \r\n      <span className=\"status\">{status}</span>\r\n        {status !== \"done\" &&\r\n         <span className=\"percent\">&nbsp;({Math.round(percent)}%)</span>\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport const DropZoneInput = () => {\r\n\r\n  // specify upload params and API url to file upload\r\n  const getUploadParams = ({ file }) => {\r\n    const body = new FormData();\r\n    body.append('dataFiles', file);\r\n    return { url: 'http://localhost:4000/uploadmultifile', body }\r\n  }\r\n\r\n  // handle the status of the file upload\r\n  const handleChangeStatus = ({ xhr }) => {\r\n    if (xhr) {\r\n      xhr.onreadystatechange = () => {\r\n        if (xhr.readyState === 4) {\r\n          const result = JSON.parse(xhr.response);\r\n          console.log(result);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"DropZoneInput\">\r\n      <div>\r\n        <Dropzone\r\n          getUploadParams={getUploadParams}\r\n          onChangeStatus={handleChangeStatus}\r\n          styles={{\r\n            dropzone: { overflow: 'auto', border: '1px solid #999', background: '#f5f5f5' },\r\n            inputLabelWithFiles: { margin: '20px 3%' }\r\n          }}\r\n          canRemove={false}\r\n          PreviewComponent={Preview}\r\n          accept=\"image/*,audio/*,video/*\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DropZoneInput;","import React, { useState, useMemo } from \"react\";\nimport Papa from \"papaparse\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport copy from \"copy-to-clipboard\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport parseAndSave from \"./parseAndSave\";\nimport DragAndDropColumn from \"./dragAndDropColumns\";\nimport DropZoneInput from \"./dropZoneInput\";\n\nimport \"react-toastify/dist/ReactToastify.min.css\";\nimport \"./styles.css\";\n\n\nexport default function App() {\n  const [initialFields, initialPrimaryId] = useMemo(\n    () => generateInitalState(),   [] );\n  const [primaryId, setPrimaryId] = useState(initialPrimaryId);\n\n  const [fields, setFields] = useState(initialFields);\n  const [source, setSource] = useState();\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [valid, reason] = isValid(source, fields, primaryId);\n\n  return (\n    <div className=\"App\">\n      <div className=\"wrapper\">\n        <h1>Quick and Drag - CSV Tool</h1>\n        <h2>Upload CSV:</h2>\n        <DropZoneInput />\n        <input\n          className=\"fileInput\"\n          type=\"file\"\n          placeholder=\"scv\"\n          onChange={evt => {\n            if (evt.target.files && evt.target.files[0]) {\n              Papa.parse(evt.target.files[0], {\n                complete: res => setSource(res)\n              });\n            }\n          }}\n        />\n        <div className=\"configTitle\">\n          <h2>Enter columns:</h2>\n          <button\n            onClick={() => {\n              copy(generatePermalink(fields, primaryId));\n              toast(\"Copied link to clipboard\");\n            }}\n          >\n            Copy Permalink\n          </button>\n        </div>\n       \n            <DragAndDropColumn fieldsets={fields} pId={primaryId} initialFields={initialFields} />\n\n        <h2>Download new data set</h2>\n        {!valid && <div className=\"invalidReason\">{reason}</div>}\n        <button\n          className={!valid ? \"invalidReason\" : \"download\" }        \n          onClick={() => {\n            setIsProcessing(true);\n            parseAndSave(source, fields, primaryId, () =>\n              setIsProcessing(false)\n            );\n          }}\n          disabled={!valid || isProcessing}\n        >\n          {valid\n            ? isProcessing\n              ? \"Loading ...\"\n              : \"Download now\"\n            : \"Error. Check your input fields.\"}\n        </button>\n      </div>        \n      <ToastContainer />\n    </div>\n  );\n}\n\nfunction isValid(source, fields, primaryId) {\n  if (!source) {\n    return [false, \"You need to upload a CSV file first\"];\n  }\n\n  if (fields.length !== source.data[0].length) {\n    return [\n      false,\n      `Error1, ${\n        source.data[0].length\n      } Error12, ${fields.length} `\n    ];\n  }\n\n  if (!fields.find(field => field.fieldName === \"email\")) {\n    return [false, 'Error3\"'];\n  }\n\n  if (!primaryId || !fields.find(field => field.id === primaryId)) {\n    return [false, \"Error13\"];\n  }\n\n  if (fields.find(field => !field.fieldName)) {\n    return [false, \"Error15\"];\n  }\n\n  return [true, \"\"];\n}\n\nfunction generateInitalState() {\n  const search = new URLSearchParams(window.location.search);\n\n  if (search.has(\"fields\") && search.has(\"primary\")) {\n    const fieldsRaw = search.get(\"fields\").split(\"|\");\n    const primaryIndex = Number(search.get(\"primary\"));\n    let primaryId = \"\";\n    const fields = fieldsRaw.map((fieldRaw, index) => {\n      const [fieldName, shouldMerge] = fieldRaw.split(\"-\");\n      const id = uuidv4();\n\n      if (index === primaryIndex) primaryId = id;\n\n      return {\n        id,\n        fieldName,\n        shouldMerge: shouldMerge === \"true\"\n      };\n    });\n\n    return [fields, primaryId];\n  } else {\n    return [\n      [\n        {\n          id: uuidv4(),\n          fieldName: \"\",\n          shouldMerge: false\n        }\n      ],\n      \"\"\n    ];\n  }\n}\n\n\nfunction generatePermalink(fields, primaryId) {\n  const params = new URLSearchParams();\n  params.set(\"fields\", \"\");\n  params.set(\"primary\", fields.findIndex(field => field.id === primaryId));\n\n  fields.forEach((field, index) => {\n    const prevParam = params.get(\"fields\");\n    params.set(\n      \"fields\",\n      `${prevParam}${field.fieldName}-${field.shouldMerge}${\n        index === fields.length - 1 ? \"\" : \"|\"\n      }`\n    );\n  });\n\n  return `${window.location.origin}?${params.toString()}`;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}